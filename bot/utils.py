import logging
from typing import List, Dict, Any, Optional

logger = logging.getLogger(__name__)

def validate_cards_count(cards: Optional[list], required: int) -> bool:
    if not cards:
        return False
    if len(cards) < required:
        logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç: —Ç—Ä–µ–±—É–µ—Ç—Å—è {required}, –¥–æ—Å—Ç—É–ø–Ω–æ {len(cards)}")
        return False
    return True

def format_card_message(
    cards: List[Dict[str, Any]],
    positions: List[str],
    is_reversed_list: List[bool],
    title: str
) -> str:
    text = f"**{title}**\n\n"
    
    for card, position, is_reversed in zip(cards, positions, is_reversed_list):    
        if is_reversed:
            text += f"**{position}:** \nüîÑ {card.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞')}\n"
            text += f"{card.get('rdesc', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n\n"
        else:
            text += f"**{position}:** \n‚¨ÜÔ∏è {card.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞')}\n"
            text += f"{card.get('desc', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n\n"
    
    return text