import asyncio
import logging
import random
import time
from typing import Optional, List, Dict, Any
from collections import defaultdict
import httpx
from aiogram import Bot, Dispatcher
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import BufferedInputFile
from images import generate_single_card_image, generate_three_card_image, generate_two_card_image, generate_celtic_cross_image
import os
from dotenv import load_dotenv


# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv("BOT_TOKEN")
API_BASE_URL = os.getenv("API_BASE_URL")
API_TIMEOUT = int(os.getenv("API_TIMEOUT", "10"))

if not TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)


class RateLimiter:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤"""
    def __init__(self):
        self.user_requests = defaultdict(list)
    
    def can_make_request(self, user_id: int, limit: int = 10, period: int = 3600) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤"""
        current_time = time.time()
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        self.user_requests[user_id] = [
            req_time for req_time in self.user_requests[user_id] 
            if current_time - req_time < period
        ]
        
        if len(self.user_requests[user_id]) >= limit:
            return False
        
        self.user_requests[user_id].append(current_time)
        return True


class TarotAPI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –∫–∞—Ä—Ç –¢–∞—Ä–æ"""
    
    def __init__(self, base_url: str, timeout: int = 10):
        self.base_url = base_url
        self.timeout = timeout
        self.cards_cache = None
        self.cache_timestamp = 0
        self.cache_ttl = 300  # 5 –º–∏–Ω—É—Ç
        self.session = None
    
    async def get_session(self) -> httpx.AsyncClient:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ HTTP —Å–µ—Å—Å–∏–∏"""
        if self.session is None or self.session.is_closed:
            self.session = httpx.AsyncClient(timeout=self.timeout)
        return self.session
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏"""
        if self.session:
            await self.session.aclose()
    
    async def get_cards(self) -> Optional[list]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ä—Ç —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        current_time = asyncio.get_event_loop().time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if (self.cards_cache and 
            current_time - self.cache_timestamp < self.cache_ttl):
            return self.cards_cache
        
        try:
            client = await self.get_session()
            response = await client.get(f"{self.base_url}/api/cards/")
            response.raise_for_status()
            cards = response.json()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            self.cards_cache = cards
            self.cache_timestamp = current_time
            
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(cards)} –∫–∞—Ä—Ç –∏–∑ API")
            return cards
            
        except httpx.TimeoutException:
            logger.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API")
            return None
        except httpx.HTTPStatusError as e:
            logger.error(f"HTTP –æ—à–∏–±–∫–∞: {e.response.status_code}")
            return None
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç: {e}", exc_info=True)
            return None
    
    async def get_random_card(self) -> Optional[Dict[Any, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç—ã"""
        cards = await self.get_cards()
        if not cards:
            return None
        return random.choice(cards)
    
    async def get_cards_by_type(self, card_type: str) -> Optional[list]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç –ø–æ —Ç–∏–ø—É (major/minor)"""
        cards = await self.get_cards()
        if not cards:
            return None
        return [card for card in cards if card.get('cardtype') == card_type]


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
tarot_api = TarotAPI(API_BASE_URL, API_TIMEOUT)
rate_limiter = RateLimiter()


def _validate_cards_count(cards: Optional[list], required: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ –∫–∞—Ä—Ç"""
    if not cards:
        return False
    if len(cards) < required:
        logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç: —Ç—Ä–µ–±—É–µ—Ç—Å—è {required}, –¥–æ—Å—Ç—É–ø–Ω–æ {len(cards)}")
        return False
    return True


async def register_user(user_id: int, username: str = None, first_name: str = None, last_name: str = None) -> bool:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ"""
    try:
        data = {
            "telegram_id": user_id,
            "username": username,
            "first_name": first_name,
            "last_name": last_name
        }
        
        async with httpx.AsyncClient(timeout=API_TIMEOUT) as client:
            response = await client.post(f"{API_BASE_URL}/api/users/register/", json=data)
            
            if response.status_code == 201:
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
                return True
            elif response.status_code == 400:
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
                return True
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {response.status_code}")
                return False
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
        return False


async def save_user_request(user_id: int, request_text: str) -> bool:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        data = {
            "telegram_id": user_id,
            "request_text": request_text
        }
        
        async with httpx.AsyncClient(timeout=API_TIMEOUT) as client:
            response = await client.post(f"{API_BASE_URL}/api/users/requests/", json=data)
            
            if response.status_code == 201:
                logger.info(f"–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
                return True
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {response.status_code}")
                return False
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
        return False


def format_card_message(
    cards: List[Dict[str, Any]],
    positions: List[str],
    is_reversed_list: List[bool],
    title: str
) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–æ–≤.
    - cards: —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç
    - positions: —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, ["–ü—Ä–æ—à–ª–æ–µ", "–ù–∞—Å—Ç–æ—è—â–µ–µ", "–ë—É–¥—É—â–µ–µ"])
    - is_reversed_list: —Å–ø–∏—Å–æ–∫ True/False –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç—ã
    - title: –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞—Å–∫–ª–∞–¥–∞
    """
    text = f"**{title}**\n\n"
    
    for card, position, is_reversed in zip(cards, positions, is_reversed_list):
        text += f"**{position}:** {card.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞')}\n"
        if is_reversed:
            text += f"üîÑ {card.get('rdesc', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n\n"
        else:
            text += f"‚¨ÜÔ∏è {card.get('desc', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n\n"
    
    return text


def get_main_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üé¥ –û–¥–Ω–∞ –∫–∞—Ä—Ç–∞", callback_data="single_card"),
                InlineKeyboardButton(text="üåÖ –î–µ–Ω—å", callback_data="daily_spread")
            ],
            [
                InlineKeyboardButton(text="üíï –õ—é–±–æ–≤—å", callback_data="love_spread"),
                InlineKeyboardButton(text="üíº –†–∞–±–æ—Ç–∞", callback_data="work_spread")
            ],
            [
                InlineKeyboardButton(text="üè∞ –ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç", callback_data="celtic_cross_spread")
            ],
            [
                InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")
            ]
        ]
    )
    return keyboard


async def _show_progress(message: Message, progress_text: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    return await message.answer(progress_text)


@dp.message(Command("start"))
async def start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = message.from_user
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await register_user(
        user_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    welcome_text = (
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name or '–¥—Ä—É–≥'}!\n\n"
        "–Ø - –±–æ—Ç –¥–ª—è –≥–∞–¥–∞–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–∞—Ö –¢–∞—Ä–æ. "
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await message.answer(welcome_text, reply_markup=get_main_keyboard(), parse_mode="Markdown")


@dp.message(Command("help"))
async def help_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "üåü **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã:**\n\n"
        "üé¥ **–û–¥–Ω–∞ –∫–∞—Ä—Ç–∞** - –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å\n"
        "üåÖ **–†–∞—Å–∫–ª–∞–¥ –Ω–∞ –¥–µ–Ω—å** - –£—Ç—Ä–æ, –î–µ–Ω—å, –í–µ—á–µ—Ä\n"
        "üíï **–†–∞—Å–∫–ª–∞–¥ –Ω–∞ –ª—é–±–æ–≤—å** - –û—Ç–Ω–æ—à–µ–Ω–∏—è –∏ —á—É–≤—Å—Ç–≤–∞\n"
        "üíº **–†–∞—Å–∫–ª–∞–¥ –Ω–∞ —Ä–∞–±–æ—Ç—É** - –ö–∞—Ä—å–µ—Ä–∞ –∏ –±–∏–∑–Ω–µ—Å\n"
        "üè∞ **–ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç** - –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–∏\n\n"
        "–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é!"
    )
    
    await message.answer(help_text, reply_markup=get_main_keyboard(), parse_mode="Markdown")


@dp.callback_query(lambda c: c.data == "single_card")
async def process_single_card(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–¥–Ω–æ–π –∫–∞—Ä—Ç—ã"""
    await send_single_card(callback.message)
    await callback.answer()


@dp.callback_query(lambda c: c.data == "daily_spread")
async def process_daily_spread(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å–∫–ª–∞–¥–∞ –Ω–∞ –¥–µ–Ω—å"""
    await send_daily_spread(callback.message)
    await callback.answer()


@dp.callback_query(lambda c: c.data == "love_spread")
async def process_love_spread(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å–∫–ª–∞–¥–∞ –Ω–∞ –ª—é–±–æ–≤—å"""
    await send_love_spread(callback.message)
    await callback.answer()


@dp.callback_query(lambda c: c.data == "work_spread")
async def process_work_spread(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å–∫–ª–∞–¥–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É"""
    await send_work_spread(callback.message)
    await callback.answer()


@dp.callback_query(lambda c: c.data == "celtic_cross_spread")
async def process_celtic_cross_spread(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å–∫–ª–∞–¥–∞ –ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç"""
    await send_celtic_cross_spread(callback.message)
    await callback.answer()


@dp.callback_query(lambda c: c.data == "help")
async def process_help(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–º–æ—â–∏"""
    await help_command(callback.message)
    await callback.answer()


async def send_single_card(message: Message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–π —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç—ã"""
    try:
        progress_msg = await message.answer("üîÆ –¢–∞—Å—É—é –∫–∞—Ä—Ç—ã...")
        await save_user_request(message.from_user.id, "–ó–∞–ø—Ä–æ—Å –æ–¥–Ω–æ–π –∫–∞—Ä—Ç—ã")
        
        card = await tarot_api.get_random_card()
        if not card:
            await progress_msg.delete()
            await message.answer("üòî –ö–∞—Ä—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.", reply_markup=get_main_keyboard())
            return
        
        is_reversed = random.choice([True, False])
        text = format_card_message([card], ["–í–∞—à–∞ –∫–∞—Ä—Ç–∞"], [is_reversed], "üé¥ –û–¥–Ω–∞ –∫–∞—Ä—Ç–∞")
        
        image_file = generate_single_card_image(card, is_reversed)
        
        await progress_msg.delete()
        
        if image_file:
            await message.answer_photo(photo=image_file, caption=text, parse_mode="Markdown")
        else:
            await message.answer(text, parse_mode="Markdown")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_single_card: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞")


async def send_daily_spread(message: Message):
    """–†–∞—Å–∫–ª–∞–¥ –Ω–∞ –¥–µ–Ω—å (3 –∫–∞—Ä—Ç—ã)"""
    try:
        progress_msg = await message.answer("üåÖ –°–æ–∑–¥–∞—é —Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ –¥–µ–Ω—å...")
        await save_user_request(message.from_user.id, "–†–∞—Å–∫–ª–∞–¥ –Ω–∞ –¥–µ–Ω—å")
        
        cards = await tarot_api.get_cards()
        if not _validate_cards_count(cards, 3):
            await progress_msg.delete()
            await message.answer("üòî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç.", reply_markup=get_main_keyboard())
            return
        
        selected_cards = random.sample(cards, 3)
        positions = ["–£—Ç—Ä–æ", "–î–µ–Ω—å", "–í–µ—á–µ—Ä"]
        is_reversed_list = [random.choice([True, False]) for _ in range(3)]
        
        text = format_card_message(selected_cards, positions, is_reversed_list, "üåÖ –†–∞—Å–∫–ª–∞–¥ –Ω–∞ –¥–µ–Ω—å")
        
        image_file = generate_three_card_image(selected_cards, is_reversed_list)
        
        await progress_msg.delete()
        
        if image_file:
            await message.answer_photo(photo=image_file, caption=text, parse_mode="Markdown")
        else:
            await message.answer(text, parse_mode="Markdown")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_daily_spread: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞")


async def send_love_spread(message: Message):
    """–†–∞—Å–∫–ª–∞–¥ –Ω–∞ –ª—é–±–æ–≤—å (2 –∫–∞—Ä—Ç—ã)"""
    try:
        progress_msg = await message.answer("‚ù§Ô∏è –°–æ–∑–¥–∞—é —Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ –ª—é–±–æ–≤—å...")
        await save_user_request(message.from_user.id, "–†–∞—Å–∫–ª–∞–¥ –Ω–∞ –ª—é–±–æ–≤—å")
        
        cards = await tarot_api.get_cards()
        if not _validate_cards_count(cards, 2):
            await progress_msg.delete()
            await message.answer("üòî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç.", reply_markup=get_main_keyboard())
            return
        
        selected_cards = random.sample(cards, 2)
        positions = ["–í—ã", "–í–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä/–æ—Ç–Ω–æ—à–µ–Ω–∏—è"]
        is_reversed_list = [random.choice([True, False]) for _ in range(2)]
        
        text = format_card_message(selected_cards, positions, is_reversed_list, "üíï –†–∞—Å–∫–ª–∞–¥ –Ω–∞ –ª—é–±–æ–≤—å")
        
        image_file = generate_two_card_image(selected_cards, is_reversed_list)
        
        await progress_msg.delete()
        
        if image_file:
            await message.answer_photo(photo=image_file, caption=text, parse_mode="Markdown")
        else:
            await message.answer(text, parse_mode="Markdown")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_love_spread: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞")


async def send_work_spread(message: Message):
    """–†–∞—Å–∫–ª–∞–¥ –Ω–∞ —Ä–∞–±–æ—Ç—É (3 –∫–∞—Ä—Ç—ã)"""
    try:
        progress_msg = await message.answer("üíº –°–æ–∑–¥–∞—é —Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ —Ä–∞–±–æ—Ç—É...")
        await save_user_request(message.from_user.id, "–†–∞—Å–∫–ª–∞–¥ –Ω–∞ —Ä–∞–±–æ—Ç—É")
        
        cards = await tarot_api.get_cards()
        if not _validate_cards_count(cards, 3):
            await progress_msg.delete()
            await message.answer("üòî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç.", reply_markup=get_main_keyboard())
            return
        
        selected_cards = random.sample(cards, 3)
        positions = ["–¢–µ–∫—É—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è", "–ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è", "–†–µ—à–µ–Ω–∏–µ"]
        is_reversed_list = [random.choice([True, False]) for _ in range(3)]
        
        text = format_card_message(selected_cards, positions, is_reversed_list, "üíº –†–∞—Å–∫–ª–∞–¥ –Ω–∞ —Ä–∞–±–æ—Ç—É")
        
        image_file = generate_three_card_image(selected_cards, is_reversed_list)
        
        await progress_msg.delete()
        
        if image_file:
            await message.answer_photo(photo=image_file, caption=text, parse_mode="Markdown")
        else:
            await message.answer(text, parse_mode="Markdown")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_work_spread: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞")


async def send_celtic_cross_spread(message: Message):
    """–†–∞—Å–∫–ª–∞–¥ –ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
        if not rate_limiter.can_make_request(message.from_user.id, limit=3, period=3600):
            await message.answer("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–ª–æ–∂–Ω—ã–º —Ä–∞—Å–∫–ª–∞–¥–æ–º")
            return
        
        progress_msg = await message.answer("üîÆ –°–æ–∑–¥–∞—é —Ä–∞—Å–∫–ª–∞–¥ –ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç...")
        await save_user_request(message.from_user.id, "–†–∞—Å–∫–ª–∞–¥ –ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç")
        
        cards = await tarot_api.get_cards()
        if not _validate_cards_count(cards, 10):
            await progress_msg.delete()
            await message.answer("üòî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç.", reply_markup=get_main_keyboard())
            return
        
        selected_cards = random.sample(cards, 10)
        positions = [
            "1. –ù–∞—Å—Ç–æ—è—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è", 
            "2. –í—ã–∑–æ–≤", 
            "3. –ë–µ—Å—Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ–µ", 
            "4. –ü—Ä–æ—à–ª–æ–µ", 
            "5. –°–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ–µ", 
            "6. –ë—É–¥—É—â–µ–µ",
            "7. –í–∞—à–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ", 
            "8. –í–Ω–µ—à–Ω–µ–µ –≤–ª–∏—è–Ω–∏–µ", 
            "9. –ù–∞–¥–µ–∂–¥—ã/—Å—Ç—Ä–∞—Ö–∏", 
            "10. –ò—Ç–æ–≥"
        ]
        is_reversed_list = [random.choice([True, False]) for _ in range(10)]
        
        text = format_card_message(selected_cards, positions, is_reversed_list, "üè∞ –†–∞—Å–∫–ª–∞–¥ –ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç")
        
        image_file = generate_celtic_cross_image(selected_cards, is_reversed_list)
        
        await progress_msg.delete()
        
        if image_file:
            await message.answer_photo(
                photo=image_file, 
                caption=text, 
                parse_mode="Markdown",
                reply_markup=get_main_keyboard()
            )
        else:
            await message.answer(
                text, 
                parse_mode="Markdown",
                reply_markup=get_main_keyboard()
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_celtic_cross_spread: {e}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞",
            reply_markup=get_main_keyboard()
        )


@dp.message()
async def handle_text_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await save_user_request(message.from_user.id, message.text)
    
    # –û—Ç–≤–µ—á–∞–µ–º —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ
    await message.answer(
        "ü§î –Ø –ø–æ–Ω—è–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞:",
        reply_markup=get_main_keyboard()
    )


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
        cards = await tarot_api.get_cards()
        if cards:
            logger.info(f"‚úÖ API –¥–æ—Å—Ç—É–ø–Ω–æ, –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(cards)} –∫–∞—Ä—Ç")
        else:
            logger.warning("‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –Ω–æ –±–æ—Ç –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        raise
    finally:
        await tarot_api.close()
        await bot.session.close()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)