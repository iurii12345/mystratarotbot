import asyncio
import logging
import random
from typing import Optional, Dict, Any
import httpx
from aiogram import Bot, Dispatcher
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import BufferedInputFile
from images import generate_single_card_image, generate_three_card_image, generate_two_card_image
import os
from dotenv import load_dotenv


# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv("BOT_TOKEN")
API_BASE_URL = os.getenv("API_BASE_URL")
API_TIMEOUT = int(os.getenv("API_TIMEOUT", "10"))

if not TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

class TarotAPI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –∫–∞—Ä—Ç –¢–∞—Ä–æ"""
    
    def __init__(self, base_url: str, timeout: int = 10):
        self.base_url = base_url
        self.timeout = timeout
        self.cards_cache = None
        self.cache_timestamp = 0
        self.cache_ttl = 300  # 5 –º–∏–Ω—É—Ç
    
    async def get_cards(self) -> Optional[list]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ä—Ç —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        current_time = asyncio.get_event_loop().time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if (self.cards_cache and 
            current_time - self.cache_timestamp < self.cache_ttl):
            return self.cards_cache
        
        try:
            async with httpx.AsyncClient(timeout=self.timeout) as client:
                response = await client.get(f"{self.base_url}/api/cards/")
                response.raise_for_status()
                cards = response.json()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
                self.cards_cache = cards
                self.cache_timestamp = current_time
                
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(cards)} –∫–∞—Ä—Ç –∏–∑ API")
                return cards
                
        except httpx.TimeoutException:
            logger.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API")
            return None
        except httpx.HTTPStatusError as e:
            logger.error(f"HTTP –æ—à–∏–±–∫–∞: {e.response.status_code}")
            return None
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç: {e}")
            return None
    
    async def get_random_card(self) -> Optional[Dict[Any, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç—ã"""
        cards = await self.get_cards()
        if not cards:
            return None
        return random.choice(cards)
    
    async def get_cards_by_type(self, card_type: str) -> Optional[list]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç –ø–æ —Ç–∏–ø—É (major/minor)"""
        cards = await self.get_cards()
        if not cards:
            return None
        return [card for card in cards if card.get('cardtype') == card_type]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–∞
tarot_api = TarotAPI(API_BASE_URL, API_TIMEOUT)

async def register_user(user_id: int, username: str = None, first_name: str = None, last_name: str = None):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ"""
    try:
        data = {
            "telegram_id": user_id,
            "username": username,
            "first_name": first_name,
            "last_name": last_name
        }
        
        async with httpx.AsyncClient(timeout=API_TIMEOUT) as client:
            response = await client.post(f"{API_BASE_URL}/api/users/register/", json=data)
            
            if response.status_code == 201:
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
                return True
            elif response.status_code == 400:
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
                return True
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {response.status_code}")
                return False
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False

async def save_user_request(user_id: int, request_text: str):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        data = {
            "telegram_id": user_id,
            "request_text": request_text
        }
        
        async with httpx.AsyncClient(timeout=API_TIMEOUT) as client:
            response = await client.post(f"{API_BASE_URL}/api/users/requests/", json=data)
            
            if response.status_code == 201:
                logger.info(f"–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
                return True
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {response.status_code}")
                return False
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False

def format_card_message(card: Dict[Any, Any], is_reversed: bool = False) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞—Ä—Ç–µ"""
    name = card.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞')
    
    if is_reversed:
        description = card.get('rdesc', '–û–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
        position = "üîÑ –ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è"
    else:
        description = card.get('desc', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
        position = "‚¨ÜÔ∏è –ü—Ä—è–º–∞—è –ø–æ–∑–∏—Ü–∏—è"
    
    message_text = card.get('message', '')
    
    text = f"üé¥ **{name}**\n\n"
    text += f"{position}\n\n"
    text += f"üìñ **–û–ø–∏—Å–∞–Ω–∏–µ:** {description}\n"
    
    if message_text:
        text += f"\nüí´ **–ü–æ—Å–ª–∞–Ω–∏–µ:** {message_text}"
    
    return text

def get_main_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üé¥ –û–¥–Ω–∞ –∫–∞—Ä—Ç–∞", callback_data="single_card")],
            [InlineKeyboardButton(text="üîÆ –†–∞—Å–∫–ª–∞–¥ –Ω–∞ –¥–µ–Ω—å", callback_data="daily_spread")],
            [InlineKeyboardButton(text="üíù –†–∞—Å–∫–ª–∞–¥ –Ω–∞ –ª—é–±–æ–≤—å", callback_data="love_spread")],
            [InlineKeyboardButton(text="üíº –†–∞—Å–∫–ª–∞–¥ –Ω–∞ —Ä–∞–±–æ—Ç—É", callback_data="work_spread")],
            [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
    )
    return keyboard

@dp.message(Command("start"))
async def start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = message.from_user
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await register_user(
        user_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    welcome_text = (
        f"üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name or '–¥—Ä—É–≥'}!\n\n"
        "–Ø - –±–æ—Ç –¥–ª—è –≥–∞–¥–∞–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–∞—Ö –¢–∞—Ä–æ. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞ –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç–µ —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É.\n\n"
        "üéØ –ß—Ç–æ —è —É–º–µ—é:\n"
        "‚Ä¢ –û–¥–∏–Ω–æ—á–Ω—ã–µ –∫–∞—Ä—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤\n"
        "‚Ä¢ –†–∞—Å–∫–ª–∞–¥—ã –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Ç–µ–º—ã –∂–∏–∑–Ω–∏\n"
        "‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤–∞—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await message.answer(welcome_text, reply_markup=get_main_keyboard(), parse_mode="Markdown")

@dp.message(Command("help"))
async def help_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "üîÆ **–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**\n\n"
        "**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "**–¢–∏–ø—ã —Ä–∞—Å–∫–ª–∞–¥–æ–≤:**\n"
        "üé¥ **–û–¥–Ω–∞ –∫–∞—Ä—Ç–∞** - –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å\n"
        "üîÆ **–†–∞—Å–∫–ª–∞–¥ –Ω–∞ –¥–µ–Ω—å** - —á—Ç–æ –∂–¥–µ—Ç –≤–∞—Å —Å–µ–≥–æ–¥–Ω—è\n"
        "üíù **–†–∞—Å–∫–ª–∞–¥ –Ω–∞ –ª—é–±–æ–≤—å** - –≤–æ–ø—Ä–æ—Å—ã –æ—Ç–Ω–æ—à–µ–Ω–∏–π\n"
        "üíº **–†–∞—Å–∫–ª–∞–¥ –Ω–∞ —Ä–∞–±–æ—Ç—É** - –∫–∞—Ä—å–µ—Ä–∞ –∏ —Ñ–∏–Ω–∞–Ω—Å—ã\n\n"
        "**–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**\n"
        "1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞\n"
        "2. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –º—ã—Å–ª–µ–Ω–Ω–æ\n"
        "3. –ü–æ–ª—É—á–∏—Ç–µ –∫–∞—Ä—Ç—É –∏ –µ—ë —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ\n\n"
        "–ü–æ–º–Ω–∏—Ç–µ: –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ - —ç—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π, –∞ –Ω–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –±—É–¥—É—â–µ–≥–æ."
    )
    
    await message.answer(help_text, reply_markup=get_main_keyboard(), parse_mode="Markdown")

@dp.callback_query(lambda c: c.data == "single_card")
async def process_single_card(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–¥–Ω–æ–π –∫–∞—Ä—Ç—ã"""
    await send_single_card(callback.message)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "daily_spread")
async def process_daily_spread(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å–∫–ª–∞–¥–∞ –Ω–∞ –¥–µ–Ω—å"""
    await send_daily_spread(callback.message)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "love_spread")
async def process_love_spread(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å–∫–ª–∞–¥–∞ –Ω–∞ –ª—é–±–æ–≤—å"""
    await send_love_spread(callback.message)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "work_spread")
async def process_work_spread(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å–∫–ª–∞–¥–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É"""
    await send_work_spread(callback.message)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "help")
async def process_help(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–º–æ—â–∏"""
    await help_command(callback.message)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "back_to_menu")
async def process_back_to_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.edit_text(
        "üåü –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )
    await callback.answer()

async def send_single_card(message: Message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–π —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –ø–æ–¥–ø–∏—Å—å—é"""
    await message.answer("üîÆ –¢–∞—Å—É—é –∫–∞—Ä—Ç—ã...")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await save_user_request(message.from_user.id, "–ó–∞–ø—Ä–æ—Å –æ–¥–Ω–æ–π –∫–∞—Ä—Ç—ã")

    card = await tarot_api.get_random_card()
    if not card:
        await message.answer(
            "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å –∫–∞—Ä—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )
        return

    # –°–ª—É—á–∞–π–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞ –ª–∏ –∫–∞—Ä—Ç–∞
    is_reversed = random.choice([True, False])

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫–∞—Ä—Ç—ã
    text = format_card_message(card, is_reversed)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –ø–æ–≤–µ—Ä—Ö —Ñ–æ–Ω–∞
    image_file = generate_single_card_image(card, is_reversed)

    if image_file:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é –∏ –∫–Ω–æ–ø–∫–æ–π
        await message.answer_photo(photo=image_file, caption=text)
    else:
        # –ï—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        await message.answer(text)

async def send_daily_spread(message: Message):
    """–†–∞—Å–∫–ª–∞–¥ –Ω–∞ –¥–µ–Ω—å (3 –∫–∞—Ä—Ç—ã)"""
    await message.answer("üåÖ –°–æ–∑–¥–∞—é —Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ –¥–µ–Ω—å...")
    
    await save_user_request(message.from_user.id, "–†–∞—Å–∫–ª–∞–¥ –Ω–∞ –¥–µ–Ω—å")
    
    cards = await tarot_api.get_cards()
    if not cards or len(cards) < 3:
        await message.answer(
            "üòî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )
        return
    
    selected_cards = random.sample(cards, 3)
    positions = ["–£—Ç—Ä–æ", "–î–µ–Ω—å", "–í–µ—á–µ—Ä"]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç—ã
    is_reversed_list = [random.choice([True, False]) for _ in range(3)]
    
    text = "üåÖ **–†–∞—Å–∫–ª–∞–¥ –Ω–∞ –¥–µ–Ω—å**\n\n"
    for card, position, is_reversed in zip(selected_cards, positions, is_reversed_list):
        text += f"**{position}:** {card.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞')}\n"
        text += f"{'üîÑ ' if is_reversed else ''}{card.get('rdesc' if is_reversed else 'desc', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n\n"

    image_file = generate_three_card_image(selected_cards, is_reversed_list)
    if image_file:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é –∏ –∫–Ω–æ–ø–∫–æ–π
        await message.answer_photo(photo=image_file, caption=text)
    else:
        # –ï—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        await message.answer(text)

async def send_love_spread(message: Message):
    """–†–∞—Å–∫–ª–∞–¥ –Ω–∞ –ª—é–±–æ–≤—å (2 –∫–∞—Ä—Ç—ã)"""
    await message.answer("üíï –°–æ–∑–¥–∞—é —Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ –ª—é–±–æ–≤—å...")
    
    await save_user_request(message.from_user.id, "–†–∞—Å–∫–ª–∞–¥ –Ω–∞ –ª—é–±–æ–≤—å")
    
    cards = await tarot_api.get_cards()
    if not cards or len(cards) < 2:
        await message.answer(
            "üòî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )
        return
    
    selected_cards = random.sample(cards, 2)
    positions = ["–í–∞—à–∏ —á—É–≤—Å—Ç–≤–∞", "–ß—É–≤—Å—Ç–≤–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞"]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç—ã
    is_reversed_list = [random.choice([True, False]) for _ in range(2)]
    
    text = "üíï **–†–∞—Å–∫–ª–∞–¥ –Ω–∞ –ª—é–±–æ–≤—å**\n\n" 
    for card, position, is_reversed in zip(selected_cards, positions, is_reversed_list):
        text += f"**{position}:** {card.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞')}\n"
        text += f"{'üîÑ ' if is_reversed else ''}{card.get('rdesc' if is_reversed else 'desc', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n\n"
    
    back_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
    )
    
    await message.answer(text, parse_mode="Markdown", reply_markup=back_keyboard)

    image_file = generate_two_card_image(selected_cards, is_reversed_list)
    if image_file:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é –∏ –∫–Ω–æ–ø–∫–æ–π
        await message.answer_photo(photo=image_file, caption=text)
    else:
        # –ï—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        await message.answer(text)

async def send_work_spread(message: Message):
    """–†–∞—Å–∫–ª–∞–¥ –Ω–∞ —Ä–∞–±–æ—Ç—É (3 –∫–∞—Ä—Ç—ã)"""
    await message.answer("üíº –°–æ–∑–¥–∞—é —Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ —Ä–∞–±–æ—Ç—É...")
    
    await save_user_request(message.from_user.id, "–†–∞—Å–∫–ª–∞–¥ –Ω–∞ —Ä–∞–±–æ—Ç—É")
    
    cards = await tarot_api.get_cards()
    if not cards or len(cards) < 3:
        await message.answer(
            "üòî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )
        return
    
    selected_cards = random.sample(cards, 3)
    positions = ["–¢–µ–∫—É—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è", "–ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è", "–†–µ—à–µ–Ω–∏–µ"]
    
    text = "üíº **–†–∞—Å–∫–ª–∞–¥ –Ω–∞ —Ä–∞–±–æ—Ç—É**\n\n"
    
    for card, position in zip(selected_cards, positions):
        is_reversed = random.choice([True, False])
        text += f"**{position}:** {card.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞')}\n"
        
        if is_reversed:
            text += f"üîÑ {card.get('rdesc', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n\n"
        else:
            text += f"‚¨ÜÔ∏è {card.get('desc', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n\n"
    
    back_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
    )
    
    await message.answer(text, parse_mode="Markdown", reply_markup=back_keyboard)

    image_file = generate_multi_card_image(selected_cards)
    if image_file:
        await message.answer_photo(photo=image_file)

@dp.message()
async def handle_text_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await save_user_request(message.from_user.id, message.text)
    
    # –û—Ç–≤–µ—á–∞–µ–º —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ
    await message.answer(
        "ü§î –Ø –ø–æ–Ω—è–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞:",
        reply_markup=get_main_keyboard()
    )

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
        cards = await tarot_api.get_cards()
        if cards:
            logger.info(f"‚úÖ API –¥–æ—Å—Ç—É–ø–Ω–æ, –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(cards)} –∫–∞—Ä—Ç")
        else:
            logger.warning("‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –Ω–æ –±–æ—Ç –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise
    finally:
        await bot.session.close()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")