import asyncio
import random
import httpx
from aiogram import Bot, Dispatcher
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
import os


from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")
# TOKEN = "6274358990:AAF3FPACng8-3Btm4sINkRGTpaAva8QPhpY"
API_URL = "http://103.71.20.245/api/cards/"

bot = Bot(token=TOKEN)
dp = Dispatcher()


# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
@dp.message(Command("start"))
async def start_command(message: Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üé¥ –°–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ä—Ç–∞", callback_data="random_card")]
        ]
    )
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É –¢–∞—Ä–æ.", reply_markup=keyboard)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /random_card ---
@dp.message(Command("random_card"))
async def random_card_command(message: Message):
    await send_random_card(message)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ ---
@dp.callback_query(lambda c: c.data == "random_card")
async def process_random_card(callback: CallbackQuery):
    await send_random_card(callback.message)
    await callback.answer()  # —É–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ


# --- –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç—ã ---
async def send_random_card(message: Message):
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(API_URL, timeout=10)
            response.raise_for_status()
            cards = response.json()

        if not cards:
            await message.answer("–í –±–∞–∑–µ –Ω–µ—Ç –∫–∞—Ä—Ç.")
            return

        card = random.choice(cards)

        text = (
            f"**{card['name']}**\n\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {card.get('desc', '–Ω–µ—Ç')}\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ: {card.get('message', '–Ω–µ—Ç')}\n"
            f"–û–±—Ä–∞—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {card.get('rdesc', '–Ω–µ—Ç')}"
        )

        await message.answer(text, parse_mode="Markdown")

        if card.get("image"):
            await message.answer_photo(card["image"])

    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã: {e}")


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
