import logging
import random

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from api_client import rate_limiter_instance, tarot_api_instance
from handlers.states import SpreadStates  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
from images import (
    generate_celtic_cross_image,
    generate_single_card_image,
    generate_three_card_image,
    generate_two_card_image,
)
from keyboards import (
    get_back_to_menu_keyboard,
    get_interpret_keyboard,
    get_main_keyboard,
    get_question_keyboard,
)
from utils import format_card_message, validate_cards_count

from .interpretation import (
    interpret_celtic_cross,
    interpret_daily_spread,
    interpret_love_spread,
    interpret_single_card,
    interpret_work_spread,
)

router = Router()
logger = logging.getLogger(__name__)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å–∫–ª–∞–¥–æ–≤
user_spreads = {}
user_questions = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π


@router.callback_query(F.data == "single_card")
async def process_single_card(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–¥–Ω–æ–π –∫–∞—Ä—Ç—ã - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å"""
    await ask_for_question(callback, state, "single_card")
    await callback.answer()


@router.callback_query(F.data == "daily_spread")
async def process_daily_spread(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å–∫–ª–∞–¥–∞ –Ω–∞ –¥–µ–Ω—å"""
    await send_daily_spread(callback.message)
    await callback.answer()


@router.callback_query(F.data == "love_spread")
async def process_love_spread(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å–∫–ª–∞–¥–∞ –Ω–∞ –ª—é–±–æ–≤—å"""
    await send_love_spread(callback.message)
    await callback.answer()


@router.callback_query(F.data == "work_spread")
async def process_work_spread(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å–∫–ª–∞–¥–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É"""
    await send_work_spread(callback.message)
    await callback.answer()


@router.callback_query(F.data == "celtic_cross_spread")
async def process_celtic_cross_spread(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å–∫–ª–∞–¥–∞ ¬´–ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç¬ª"""
    await send_celtic_cross_spread(callback.message)
    await callback.answer()


@router.callback_query(F.data == "skip_question")
async def process_skip_question(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–∞"""
    data = await state.get_data()
    spread_type = data.get("spread_type")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º, —á—Ç–æ –≤–æ–ø—Ä–æ—Å –ø—Ä–æ–ø—É—â–µ–Ω
    user_questions[callback.from_user.id] = None

    # –°—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º —Ä–∞—Å–∫–ª–∞–¥
    if spread_type == "single_card":
        await send_single_card(callback.message)
    elif spread_type == "daily_spread":
        await send_daily_spread(callback.message)
    elif spread_type == "love_spread":
        await send_love_spread(callback.message)
    elif spread_type == "work_spread":
        await send_work_spread(callback.message)
    elif spread_type == "celtic_cross_spread":
        await send_celtic_cross_spread(callback.message)

    await state.clear()
    await callback.answer()


@router.message(SpreadStates.waiting_for_question)
async def process_user_question(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    data = await state.get_data()
    spread_type = data.get("spread_type")
    question = message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å
    user_questions[message.from_user.id] = question

    # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å–∫–ª–∞–¥
    if spread_type == "single_card":
        await send_single_card(message, question)
    elif spread_type == "daily_spread":
        await send_daily_spread(message, question)
    elif spread_type == "love_spread":
        await send_love_spread(message, question)
    elif spread_type == "work_spread":
        await send_work_spread(message, question)
    elif spread_type == "celtic_cross_spread":
        await send_celtic_cross_spread(message, question)

    await state.clear()


async def ask_for_question(
    callback: CallbackQuery, state: FSMContext, spread_type: str
):
    """–ó–∞–ø—Ä–æ—Å –≤–æ–ø—Ä–æ—Å–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    spread_names = {
        "single_card": "–æ–¥–Ω—É –∫–∞—Ä—Ç—É",
        "daily_spread": "—Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ –¥–µ–Ω—å",
        "love_spread": "—Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ –ª—é–±–æ–≤—å",
        "work_spread": "—Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ —Ä–∞–±–æ—Ç—É",
        "celtic_cross_spread": "¬´–ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç¬ª",
    }

    await state.update_data(spread_type=spread_type)
    await state.set_state(SpreadStates.waiting_for_question)

    message_text = (
        f"üîÆ –í—ã –≤—ã–±—Ä–∞–ª–∏ {spread_names[spread_type]}\n\n"
        "üí≠ *–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –≤–æ–ª–Ω—É–µ—Ç:*\n"
        "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–µ–Ω —Ä–∞—Å–∫–ª–∞–¥.\n"
        "–ß–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ –≤–æ–ø—Ä–æ—Å, —Ç–µ–º —Ç–æ—á–Ω–µ–µ –±—É–¥–µ—Ç –æ—Ç–≤–µ—Ç!"
    )

    await callback.message.answer(
        message_text, reply_markup=get_question_keyboard(), parse_mode="Markdown"
    )


@router.callback_query(F.data == "help")
async def process_help(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–º–æ—â–∏"""
    from .start import help_command

    await help_command(callback.message)
    await callback.answer()


@router.callback_query(F.data == "interpret_spread")
async def process_interpret_spread(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è —Ä–∞—Å–∫–ª–∞–¥–∞"""
    user_id = callback.from_user.id
    spread_data = user_spreads.get(user_id)

    if not spread_data:
        await callback.answer("‚ùå –†–∞—Å–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    spread_type = spread_data.get("type")
    cards = spread_data.get("cards")
    positions = spread_data.get("positions")
    is_reversed_list = spread_data.get("is_reversed_list")

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ
    interpretation = await generate_interpretation(
        spread_type, cards, positions, is_reversed_list
    )
    
     # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è
    
    await callback.message.answer(interpretation, parse_mode="Markdown")
    await callback.answer()


@router.callback_query(F.data == "back_to_menu")
async def process_back_to_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —ç—Ç–æ —Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–±
        await callback.message.answer(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard(),
            parse_mode="Markdown",
        )

        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            await callback.message.edit_reply_markup(reply_markup=None)
        except Exception:
            pass  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    finally:
        await callback.answer()


async def generate_interpretation(spread_type, cards, positions, is_reversed_list):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è —Ä–∞—Å–∫–ª–∞–¥–∞"""
    if spread_type == "single_card":
        return interpret_single_card(cards[0], is_reversed_list[0])
    elif spread_type == "daily_spread":
        return interpret_daily_spread(cards, positions, is_reversed_list)
    elif spread_type == "love_spread":
        return interpret_love_spread(cards, positions, is_reversed_list)
    elif spread_type == "work_spread":
        return interpret_work_spread(cards, positions, is_reversed_list)
    elif spread_type == "celtic_cross":
        return interpret_celtic_cross(cards, positions, is_reversed_list)

    return "üîÆ –¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."


async def send_single_card(message: Message, question: str = None):
    try:
        progress_msg = await message.answer("üîÆ –¢–∞—Å—É—é –∫–∞—Ä—Ç—ã...")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –≤–æ–ø—Ä–æ—Å–æ–º
        request_text = "–ó–∞–ø—Ä–æ—Å –æ–¥–Ω–æ–π –∫–∞—Ä—Ç—ã"
        if question:
            request_text += f": {question}"
        await tarot_api_instance.save_user_request(message.from_user.id, request_text)

        card = await tarot_api_instance.get_random_card()
        if not card:
            await progress_msg.delete()
            await message.answer(
                "üòî –ö–∞—Ä—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.", reply_markup=get_main_keyboard()
            )
            return

        is_reversed = random.choice([True, False])

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –≤–æ–ø—Ä–æ—Å–æ–º, –µ—Å–ª–∏ –µ—Å—Ç—å
        title = "üé¥ –û–¥–Ω–∞ –∫–∞—Ä—Ç–∞"
        if question:
            title += f"\nüí≠ –í–æ–ø—Ä–æ—Å: {question}"

        text = format_card_message([card], ["–í–∞—à–∞ –∫–∞—Ä—Ç–∞"], [is_reversed], title)

        image_file = generate_single_card_image(card, is_reversed)

        await progress_msg.delete()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–∫–ª–∞–¥ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è
        user_spreads[message.from_user.id] = {
            "type": "single_card",
            "cards": [card],
            "positions": ["–í–∞—à–∞ –∫–∞—Ä—Ç–∞"],
            "is_reversed_list": [is_reversed],
            "question": question,
        }

        if image_file:
            await message.answer_photo(
                photo=image_file,
                caption=text,
                parse_mode="Markdown",
                reply_markup=get_interpret_keyboard(),
            )
        else:
            await message.answer(
                text, parse_mode="Markdown", reply_markup=get_interpret_keyboard()
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_single_card: {e}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞",
            reply_markup=get_back_to_menu_keyboard(),
        )


async def send_daily_spread(message: Message):
    """–†–∞—Å–∫–ª–∞–¥ –Ω–∞ –¥–µ–Ω—å (3 –∫–∞—Ä—Ç—ã)"""
    try:
        progress_msg = await message.answer("üåÖ –°–æ–∑–¥–∞—é —Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ –¥–µ–Ω—å...")
        await tarot_api_instance.save_user_request(
            message.from_user.id, "–†–∞—Å–∫–ª–∞–¥ –Ω–∞ –¥–µ–Ω—å"
        )

        cards = await tarot_api_instance.get_cards()
        if not cards or len(cards) < 3:
            await progress_msg.delete()
            await message.answer(
                "üòî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç.", reply_markup=get_main_keyboard()
            )
            return

        selected_cards = random.sample(cards, 3)
        positions = ["1. –£—Ç—Ä–æ", "2. –î–µ–Ω—å", "3. –í–µ—á–µ—Ä"]
        is_reversed_list = [random.choice([True, False]) for _ in range(3)]

        text = format_card_message(
            selected_cards, positions, is_reversed_list, "üåÖ –†–∞—Å–∫–ª–∞–¥ –Ω–∞ –¥–µ–Ω—å"
        )

        image_file = generate_three_card_image(selected_cards, is_reversed_list)

        await progress_msg.delete()

        if image_file:
            await message.answer_photo(
                photo=image_file,
                caption=text,
                parse_mode="Markdown",
                reply_markup=get_interpret_keyboard(),
            )
        else:
            await message.answer(
                text, parse_mode="Markdown", reply_markup=get_interpret_keyboard()
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_daily_spread: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞")


async def send_love_spread(message: Message):
    """–†–∞—Å–∫–ª–∞–¥ –Ω–∞ –ª—é–±–æ–≤—å (2 –∫–∞—Ä—Ç—ã)"""
    try:
        progress_msg = await message.answer("üíï –°–æ–∑–¥–∞—é —Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ –ª—é–±–æ–≤—å...")
        await tarot_api_instance.save_user_request(
            message.from_user.id, "–†–∞—Å–∫–ª–∞–¥ –Ω–∞ –ª—é–±–æ–≤—å"
        )

        cards = await tarot_api_instance.get_cards()
        if not cards or len(cards) < 2:
            await progress_msg.delete()
            await message.answer(
                "üòî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç.", reply_markup=get_main_keyboard()
            )
            return

        selected_cards = random.sample(cards, 2)
        positions = ["1. –í—ã", "2. –í–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä/–æ—Ç–Ω–æ—à–µ–Ω–∏—è"]
        is_reversed_list = [random.choice([True, False]) for _ in range(2)]

        text = format_card_message(
            selected_cards, positions, is_reversed_list, "üíï –†–∞—Å–∫–ª–∞–¥ –Ω–∞ –ª—é–±–æ–≤—å"
        )

        image_file = generate_two_card_image(selected_cards, is_reversed_list)

        await progress_msg.delete()

        if image_file:
            await message.answer_photo(
                photo=image_file,
                caption=text,
                parse_mode="Markdown",
                reply_markup=get_interpret_keyboard(),
            )
        else:
            await message.answer(
                text, parse_mode="Markdown", reply_markup=get_interpret_keyboard()
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_love_spread: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞")


async def send_work_spread(message: Message):
    """–†–∞—Å–∫–ª–∞–¥ –Ω–∞ —Ä–∞–±–æ—Ç—É (3 –∫–∞—Ä—Ç—ã)"""
    try:
        progress_msg = await message.answer("üíº –°–æ–∑–¥–∞—é —Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ —Ä–∞–±–æ—Ç—É...")
        await tarot_api_instance.save_user_request(
            message.from_user.id, "–†–∞—Å–∫–ª–∞–¥ –Ω–∞ —Ä–∞–±–æ—Ç—É"
        )

        cards = await tarot_api_instance.get_cards()
        if not cards or len(cards) < 3:
            await progress_msg.delete()
            await message.answer(
                "üòî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç.", reply_markup=get_main_keyboard()
            )
            return

        selected_cards = random.sample(cards, 3)
        positions = ["1. –¢–µ–∫—É—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è", "2. –ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è", "3. –†–µ—à–µ–Ω–∏–µ"]
        is_reversed_list = [random.choice([True, False]) for _ in range(3)]

        text = format_card_message(
            selected_cards, positions, is_reversed_list, "üíº –†–∞—Å–∫–ª–∞–¥ –Ω–∞ —Ä–∞–±–æ—Ç—É"
        )

        image_file = generate_three_card_image(selected_cards, is_reversed_list)

        await progress_msg.delete()

        if image_file:
            await message.answer_photo(
                photo=image_file,
                caption=text,
                parse_mode="Markdown",
                reply_markup=get_interpret_keyboard(),
            )
        else:
            await message.answer(
                text, parse_mode="Markdown", reply_markup=get_interpret_keyboard()
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_work_spread: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞")


async def send_celtic_cross_spread(message: Message):
    """–†–∞—Å–∫–ª–∞–¥ ¬´–ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç¬ª"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
        if not rate_limiter_instance.can_make_request(
            message.from_user.id, limit=3, period=3600
        ):
            await message.answer(
                "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–ª–æ–∂–Ω—ã–º —Ä–∞—Å–∫–ª–∞–¥–æ–º"
            )
            return

        progress_msg = await message.answer("üîÆ –°–æ–∑–¥–∞—é —Ä–∞—Å–∫–ª–∞–¥ ¬´–ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç¬ª...")
        await tarot_api_instance.save_user_request(
            message.from_user.id, "–†–∞—Å–∫–ª–∞–¥ ¬´–ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç¬ª"
        )

        cards = await tarot_api_instance.get_cards()
        if not cards or len(cards) < 10:
            await progress_msg.delete()
            await message.answer(
                "üòî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç.", reply_markup=get_main_keyboard()
            )
            return

        selected_cards = random.sample(cards, 10)
        positions = [
            "1. –ù–∞—Å—Ç–æ—è—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è",
            "2. –í—ã–∑–æ–≤",
            "3. –ë–µ—Å—Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ–µ",
            "4. –ü—Ä–æ—à–ª–æ–µ",
            "5. –°–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ–µ",
            "6. –ë—É–¥—É—â–µ–µ",
            "7. –í–∞—à–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ",
            "8. –í–Ω–µ—à–Ω–µ–µ –≤–ª–∏—è–Ω–∏–µ",
            "9. –ù–∞–¥–µ–∂–¥—ã/—Å—Ç—Ä–∞—Ö–∏",
            "10. –ò—Ç–æ–≥",
        ]
        is_reversed_list = [random.choice([True, False]) for _ in range(10)]

        text = format_card_message(
            selected_cards, positions, is_reversed_list, "üè∞ –†–∞—Å–∫–ª–∞–¥ ¬´–ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç¬ª"
        )

        image_file = generate_celtic_cross_image(selected_cards, is_reversed_list)

        await progress_msg.delete()

        if image_file:
            await message.answer_photo(
                photo=image_file,
                caption=text,
                parse_mode="Markdown",
                reply_markup=get_interpret_keyboard(),
            )
        else:
            await message.answer(
                text, parse_mode="Markdown", reply_markup=get_interpret_keyboard()
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_celtic_cross_spread: {e}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞",
            reply_markup=get_back_to_menu_keyboard(),
        )
