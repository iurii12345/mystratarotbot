import random
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery

# –ê–±—Å–æ–ª—é—Ç–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from api_client import tarot_api_instance, rate_limiter_instance
from keyboards import get_main_keyboard, get_interpret_keyboard, get_back_to_menu_keyboard
from utils import format_card_message, validate_cards_count
from images import generate_single_card_image, generate_three_card_image, generate_two_card_image, generate_celtic_cross_image

router = Router()
logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–ª—è–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å–∫–ª–∞–¥–æ–≤
user_spreads = {}

@router.callback_query(F.data == "single_card")
async def process_single_card(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–¥–Ω–æ–π –∫–∞—Ä—Ç—ã"""
    await send_single_card(callback.message)
    await callback.answer()

@router.callback_query(F.data == "daily_spread")
async def process_daily_spread(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å–∫–ª–∞–¥–∞ –Ω–∞ –¥–µ–Ω—å"""
    await send_daily_spread(callback.message)
    await callback.answer()

@router.callback_query(F.data == "love_spread")
async def process_love_spread(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å–∫–ª–∞–¥–∞ –Ω–∞ –ª—é–±–æ–≤—å"""
    await send_love_spread(callback.message)
    await callback.answer()

@router.callback_query(F.data == "work_spread")
async def process_work_spread(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å–∫–ª–∞–¥–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É"""
    await send_work_spread(callback.message)
    await callback.answer()

@router.callback_query(F.data == "celtic_cross_spread")
async def process_celtic_cross_spread(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å–∫–ª–∞–¥–∞ –ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç"""
    await send_celtic_cross_spread(callback.message)
    await callback.answer()

@router.callback_query(F.data == "help")
async def process_help(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–º–æ—â–∏"""
    from .start import help_command
    await help_command(callback.message)
    await callback.answer()

@router.callback_query(F.data == "interpret_spread")
async def process_interpret_spread(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è —Ä–∞—Å–∫–ª–∞–¥–∞"""
    user_id = callback.from_user.id
    spread_data = user_spreads.get(user_id)
    
    if not spread_data:
        await callback.answer("‚ùå –†–∞—Å–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    spread_type = spread_data.get('type')
    cards = spread_data.get('cards')
    positions = spread_data.get('positions')
    is_reversed_list = spread_data.get('is_reversed_list')
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ
    interpretation = await generate_interpretation(spread_type, cards, positions, is_reversed_list)
    
    await callback.message.answer(interpretation, parse_mode="Markdown")
    await callback.answer()

@router.callback_query(F.data == "back_to_menu")
async def process_back_to_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —ç—Ç–æ —Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–±
        await callback.message.answer(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard(),
            parse_mode="Markdown"
        )
        
        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            await callback.message.edit_reply_markup(reply_markup=None)
        except:
            pass  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    finally:
        await callback.answer()

async def generate_interpretation(spread_type, cards, positions, is_reversed_list):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è —Ä–∞—Å–∫–ª–∞–¥–∞"""
    if spread_type == "single_card":
        return await interpret_single_card(cards[0], is_reversed_list[0])
    elif spread_type == "daily_spread":
        return await interpret_daily_spread(cards, positions, is_reversed_list)
    elif spread_type == "love_spread":
        return await interpret_love_spread(cards, positions, is_reversed_list)
    elif spread_type == "work_spread":
        return await interpret_work_spread(cards, positions, is_reversed_list)
    elif spread_type == "celtic_cross":
        return await interpret_celtic_cross(cards, positions, is_reversed_list)
    
    return "üîÆ –¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."

async def interpret_single_card(card, is_reversed):
    """–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç—ã"""
    card_name = card.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞')
    interpretation = f"üìñ **–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã {card_name}**\n\n"
    
    if is_reversed:
        interpretation += f"üîÑ **–ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ:**\n{card.get('rdesc', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n\n"
        interpretation += f"üí° **–°–æ–≤–µ—Ç:** {card.get('radvice', '–ü—Ä–∏–º–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é –∫–∞–∫ –µ—Å—Ç—å')}"
    else:
        interpretation += f"‚¨ÜÔ∏è **–ü—Ä—è–º–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ:**\n{card.get('desc', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n\n"
        interpretation += f"üí° **–°–æ–≤–µ—Ç:** {card.get('advice', '–î–æ–≤–µ—Ä—å—Ç–µ—Å—å —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏')}"
    
    return interpretation

async def send_single_card(message: Message):
    try:
        progress_msg = await message.answer("üîÆ –¢–∞—Å—É—é –∫–∞—Ä—Ç—ã...")
        await tarot_api_instance.save_user_request(message.from_user.id, "–ó–∞–ø—Ä–æ—Å –æ–¥–Ω–æ–π –∫–∞—Ä—Ç—ã")
        
        card = await tarot_api_instance.get_random_card()
        if not card:
            await progress_msg.delete()
            await message.answer("üòî –ö–∞—Ä—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.", reply_markup=get_main_keyboard())
            return
        
        is_reversed = random.choice([True, False])
        text = format_card_message([card], ["–í–∞—à–∞ –∫–∞—Ä—Ç–∞"], [is_reversed], "üé¥ –û–¥–Ω–∞ –∫–∞—Ä—Ç–∞")
        
        image_file = generate_single_card_image(card, is_reversed)
        
        await progress_msg.delete()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–∫–ª–∞–¥ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è
        user_spreads[message.from_user.id] = {
            'type': 'single_card',
            'cards': [card],
            'positions': ["–í–∞—à–∞ –∫–∞—Ä—Ç–∞"],
            'is_reversed_list': [is_reversed]
        }
        
        if image_file:
            await message.answer_photo(
                photo=image_file, 
                caption=text, 
                parse_mode="Markdown",
                reply_markup=get_interpret_keyboard()
            )
        else:
            await message.answer(
                text, 
                parse_mode="Markdown",
                reply_markup=get_interpret_keyboard()
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_single_card: {e}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞",
            reply_markup=get_back_to_menu_keyboard()
        )

async def send_daily_spread(message: Message):
    """–†–∞—Å–∫–ª–∞–¥ –Ω–∞ –¥–µ–Ω—å (3 –∫–∞—Ä—Ç—ã)"""
    try:
        progress_msg = await message.answer("üåÖ –°–æ–∑–¥–∞—é —Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ –¥–µ–Ω—å...")
        await tarot_api_instance.save_user_request(message.from_user.id, "–†–∞—Å–∫–ª–∞–¥ –Ω–∞ –¥–µ–Ω—å")
        
        cards = await tarot_api_instance.get_cards()
        if not cards or len(cards) < 3:
            await progress_msg.delete()
            await message.answer("üòî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç.", reply_markup=get_main_keyboard())
            return
        
        selected_cards = random.sample(cards, 3)
        positions = ["–£—Ç—Ä–æ", "–î–µ–Ω—å", "–í–µ—á–µ—Ä"]
        is_reversed_list = [random.choice([True, False]) for _ in range(3)]
        
        text = format_card_message(selected_cards, positions, is_reversed_list, "üåÖ –†–∞—Å–∫–ª–∞–¥ –Ω–∞ –¥–µ–Ω—å")
        
        image_file = generate_three_card_image(selected_cards, is_reversed_list)
        
        await progress_msg.delete()
        
        if image_file:
            await message.answer_photo(
                photo=image_file, 
                caption=text, 
                parse_mode="Markdown",
                reply_markup=get_interpret_keyboard()
            )
        else:
            await message.answer(
                text, 
                parse_mode="Markdown",
                reply_markup=get_interpret_keyboard()
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_daily_spread: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞")

async def send_love_spread(message: Message):
    """–†–∞—Å–∫–ª–∞–¥ –Ω–∞ –ª—é–±–æ–≤—å (2 –∫–∞—Ä—Ç—ã)"""
    try:
        progress_msg = await message.answer("üíï –°–æ–∑–¥–∞—é —Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ –ª—é–±–æ–≤—å...")
        await tarot_api_instance.save_user_request(message.from_user.id, "–†–∞—Å–∫–ª–∞–¥ –Ω–∞ –ª—é–±–æ–≤—å")
        
        cards = await tarot_api_instance.get_cards()
        if not cards or len(cards) < 2:
            await progress_msg.delete()
            await message.answer("üòî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç.", reply_markup=get_main_keyboard())
            return
        
        selected_cards = random.sample(cards, 2)
        positions = ["–í—ã", "–í–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä/–æ—Ç–Ω–æ—à–µ–Ω–∏—è"]
        is_reversed_list = [random.choice([True, False]) for _ in range(2)]
        
        text = format_card_message(selected_cards, positions, is_reversed_list, "üíï –†–∞—Å–∫–ª–∞–¥ –Ω–∞ –ª—é–±–æ–≤—å")
        
        image_file = generate_two_card_image(selected_cards, is_reversed_list)
        
        await progress_msg.delete()
        
        if image_file:
            await message.answer_photo(
                photo=image_file, 
                caption=text, 
                parse_mode="Markdown",
                reply_markup=get_interpret_keyboard()
            )
        else:
            await message.answer(
                text, 
                parse_mode="Markdown",
                reply_markup=get_interpret_keyboard()
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_love_spread: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞")

async def send_work_spread(message: Message):
    """–†–∞—Å–∫–ª–∞–¥ –Ω–∞ —Ä–∞–±–æ—Ç—É (3 –∫–∞—Ä—Ç—ã)"""
    try:
        progress_msg = await message.answer("üíº –°–æ–∑–¥–∞—é —Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ —Ä–∞–±–æ—Ç—É...")
        await tarot_api_instance.save_user_request(message.from_user.id, "–†–∞—Å–∫–ª–∞–¥ –Ω–∞ —Ä–∞–±–æ—Ç—É")
        
        cards = await tarot_api_instance.get_cards()
        if not cards or len(cards) < 3:
            await progress_msg.delete()
            await message.answer("üòî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç.", reply_markup=get_main_keyboard())
            return
        
        selected_cards = random.sample(cards, 3)
        positions = ["–¢–µ–∫—É—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è", "–ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è", "–†–µ—à–µ–Ω–∏–µ"]
        is_reversed_list = [random.choice([True, False]) for _ in range(3)]
        
        text = format_card_message(selected_cards, positions, is_reversed_list, "üíº –†–∞—Å–∫–ª–∞–¥ –Ω–∞ —Ä–∞–±–æ—Ç—É")
        
        image_file = generate_three_card_image(selected_cards, is_reversed_list)
        
        await progress_msg.delete()
        
        if image_file:
            await message.answer_photo(
                photo=image_file, 
                caption=text, 
                parse_mode="Markdown",
                reply_markup=get_interpret_keyboard()
            )
        else:
            await message.answer(
                text, 
                parse_mode="Markdown",
                reply_markup=get_interpret_keyboard()
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_work_spread: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞")

async def send_celtic_cross_spread(message: Message):
    """–†–∞—Å–∫–ª–∞–¥ –ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
        if not rate_limiter_instance.can_make_request(message.from_user.id, limit=3, period=3600):
            await message.answer("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–ª–æ–∂–Ω—ã–º —Ä–∞—Å–∫–ª–∞–¥–æ–º")
            return
        
        progress_msg = await message.answer("üîÆ –°–æ–∑–¥–∞—é —Ä–∞—Å–∫–ª–∞–¥ –ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç...")
        await tarot_api_instance.save_user_request(message.from_user.id, "–†–∞—Å–∫–ª–∞–¥ –ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç")
        
        cards = await tarot_api_instance.get_cards()
        if not cards or len(cards) < 10:
            await progress_msg.delete()
            await message.answer("üòî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç.", reply_markup=get_main_keyboard())
            return
        
        selected_cards = random.sample(cards, 10)
        positions = [
            "1. –ù–∞—Å—Ç–æ—è—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è", 
            "2. –í—ã–∑–æ–≤", 
            "3. –ë–µ—Å—Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ–µ", 
            "4. –ü—Ä–æ—à–ª–æ–µ", 
            "5. –°–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ–µ", 
            "6. –ë—É–¥—É—â–µ–µ",
            "7. –í–∞—à–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ", 
            "8. –í–Ω–µ—à–Ω–µ–µ –≤–ª–∏—è–Ω–∏–µ", 
            "9. –ù–∞–¥–µ–∂–¥—ã/—Å—Ç—Ä–∞—Ö–∏", 
            "10. –ò—Ç–æ–≥"
        ]
        is_reversed_list = [random.choice([True, False]) for _ in range(10)]
        
        text = format_card_message(selected_cards, positions, is_reversed_list, "üè∞ –†–∞—Å–∫–ª–∞–¥ –ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç")
        
        image_file = generate_celtic_cross_image(selected_cards, is_reversed_list)
        
        await progress_msg.delete()
        
        if image_file:
            await message.answer_photo(
                photo=image_file, 
                caption=text, 
                parse_mode="Markdown",
                reply_markup=get_interpret_keyboard()
            )
        else:
            await message.answer(
                text, 
                parse_mode="Markdown",
                reply_markup=get_interpret_keyboard()
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_celtic_cross_spread: {e}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞",
            reply_markup=get_back_to_menu_keyboard()
        )