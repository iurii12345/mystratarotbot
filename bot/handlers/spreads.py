import random
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery

# –ê–±—Å–æ–ª—é—Ç–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from api_client import tarot_api_instance, rate_limiter_instance
from keyboards import get_main_keyboard
from utils import format_card_message
from images import generate_single_card_image, generate_three_card_image, generate_two_card_image, generate_celtic_cross_image

router = Router()
logger = logging.getLogger(__name__)

@router.callback_query(F.data == "single_card")
async def process_single_card(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–¥–Ω–æ–π –∫–∞—Ä—Ç—ã"""
    await send_single_card(callback.message)
    await callback.answer()

@router.callback_query(F.data == "daily_spread")
async def process_daily_spread(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å–∫–ª–∞–¥–∞ –Ω–∞ –¥–µ–Ω—å"""
    await send_daily_spread(callback.message)
    await callback.answer()

@router.callback_query(F.data == "love_spread")
async def process_love_spread(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å–∫–ª–∞–¥–∞ –Ω–∞ –ª—é–±–æ–≤—å"""
    await send_love_spread(callback.message)
    await callback.answer()

@router.callback_query(F.data == "work_spread")
async def process_work_spread(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å–∫–ª–∞–¥–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É"""
    await send_work_spread(callback.message)
    await callback.answer()

@router.callback_query(F.data == "celtic_cross_spread")
async def process_celtic_cross_spread(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å–∫–ª–∞–¥–∞ –ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç"""
    await send_celtic_cross_spread(callback.message)
    await callback.answer()

@router.callback_query(F.data == "help")
async def process_help(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–º–æ—â–∏"""
    from .start import help_command
    await help_command(callback.message)
    await callback.answer()

async def send_single_card(message: Message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–π —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç—ã"""
    try:
        progress_msg = await message.answer("üîÆ –¢–∞—Å—É—é –∫–∞—Ä—Ç—ã...")
        await tarot_api.save_user_request(message.from_user.id, "–ó–∞–ø—Ä–æ—Å –æ–¥–Ω–æ–π –∫–∞—Ä—Ç—ã")
        
        card = await tarot_api.get_random_card()
        if not card:
            await progress_msg.delete()
            await message.answer("üòî –ö–∞—Ä—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.", reply_markup=get_main_keyboard())
            return
        
        is_reversed = random.choice([True, False])
        text = format_card_message([card], ["–í–∞—à–∞ –∫–∞—Ä—Ç–∞"], [is_reversed], "üé¥ –û–¥–Ω–∞ –∫–∞—Ä—Ç–∞")
        
        image_file = generate_single_card_image(card, is_reversed)
        
        await progress_msg.delete()
        
        if image_file:
            await message.answer_photo(photo=image_file, caption=text, parse_mode="Markdown")
        else:
            await message.answer(text, parse_mode="Markdown")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_single_card: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞")

async def send_daily_spread(message: Message):
    """–†–∞—Å–∫–ª–∞–¥ –Ω–∞ –¥–µ–Ω—å (3 –∫–∞—Ä—Ç—ã)"""
    try:
        progress_msg = await message.answer("üåÖ –°–æ–∑–¥–∞—é —Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ –¥–µ–Ω—å...")
        await tarot_api.save_user_request(message.from_user.id, "–†–∞—Å–∫–ª–∞–¥ –Ω–∞ –¥–µ–Ω—å")
        
        cards = await tarot_api.get_cards()
        if not cards or len(cards) < 3:
            await progress_msg.delete()
            await message.answer("üòî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç.", reply_markup=get_main_keyboard())
            return
        
        selected_cards = random.sample(cards, 3)
        positions = ["–£—Ç—Ä–æ", "–î–µ–Ω—å", "–í–µ—á–µ—Ä"]
        is_reversed_list = [random.choice([True, False]) for _ in range(3)]
        
        text = format_card_message(selected_cards, positions, is_reversed_list, "üåÖ –†–∞—Å–∫–ª–∞–¥ –Ω–∞ –¥–µ–Ω—å")
        
        image_file = generate_three_card_image(selected_cards, is_reversed_list)
        
        await progress_msg.delete()
        
        if image_file:
            await message.answer_photo(photo=image_file, caption=text, parse_mode="Markdown")
        else:
            await message.answer(text, parse_mode="Markdown")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_daily_spread: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞")

async def send_love_spread(message: Message):
    """–†–∞—Å–∫–ª–∞–¥ –Ω–∞ –ª—é–±–æ–≤—å (2 –∫–∞—Ä—Ç—ã)"""
    try:
        progress_msg = await message.answer("‚ù§Ô∏è –°–æ–∑–¥–∞—é —Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ –ª—é–±–æ–≤—å...")
        await tarot_api.save_user_request(message.from_user.id, "–†–∞—Å–∫–ª–∞–¥ –Ω–∞ –ª—é–±–æ–≤—å")
        
        cards = await tarot_api.get_cards()
        if not cards or len(cards) < 2:
            await progress_msg.delete()
            await message.answer("üòî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç.", reply_markup=get_main_keyboard())
            return
        
        selected_cards = random.sample(cards, 2)
        positions = ["–í—ã", "–í–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä/–æ—Ç–Ω–æ—à–µ–Ω–∏—è"]
        is_reversed_list = [random.choice([True, False]) for _ in range(2)]
        
        text = format_card_message(selected_cards, positions, is_reversed_list, "üíï –†–∞—Å–∫–ª–∞–¥ –Ω–∞ –ª—é–±–æ–≤—å")
        
        image_file = generate_two_card_image(selected_cards, is_reversed_list)
        
        await progress_msg.delete()
        
        if image_file:
            await message.answer_photo(photo=image_file, caption=text, parse_mode="Markdown")
        else:
            await message.answer(text, parse_mode="Markdown")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_love_spread: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞")

async def send_work_spread(message: Message):
    """–†–∞—Å–∫–ª–∞–¥ –Ω–∞ —Ä–∞–±–æ—Ç—É (3 –∫–∞—Ä—Ç—ã)"""
    try:
        progress_msg = await message.answer("üíº –°–æ–∑–¥–∞—é —Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ —Ä–∞–±–æ—Ç—É...")
        await tarot_api.save_user_request(message.from_user.id, "–†–∞—Å–∫–ª–∞–¥ –Ω–∞ —Ä–∞–±–æ—Ç—É")
        
        cards = await tarot_api.get_cards()
        if not cards or len(cards) < 3:
            await progress_msg.delete()
            await message.answer("üòî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç.", reply_markup=get_main_keyboard())
            return
        
        selected_cards = random.sample(cards, 3)
        positions = ["–¢–µ–∫—É—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è", "–ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è", "–†–µ—à–µ–Ω–∏–µ"]
        is_reversed_list = [random.choice([True, False]) for _ in range(3)]
        
        text = format_card_message(selected_cards, positions, is_reversed_list, "üíº –†–∞—Å–∫–ª–∞–¥ –Ω–∞ —Ä–∞–±–æ—Ç—É")
        
        image_file = generate_three_card_image(selected_cards, is_reversed_list)
        
        await progress_msg.delete()
        
        if image_file:
            await message.answer_photo(photo=image_file, caption=text, parse_mode="Markdown")
        else:
            await message.answer(text, parse_mode="Markdown")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_work_spread: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞")

async def send_celtic_cross_spread(message: Message):
    """–†–∞—Å–∫–ª–∞–¥ –ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
        if not rate_limiter.can_make_request(message.from_user.id, limit=3, period=3600):
            await message.answer("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–ª–æ–∂–Ω—ã–º —Ä–∞—Å–∫–ª–∞–¥–æ–º")
            return
        
        progress_msg = await message.answer("üîÆ –°–æ–∑–¥–∞—é —Ä–∞—Å–∫–ª–∞–¥ –ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç...")
        await tarot_api.save_user_request(message.from_user.id, "–†–∞—Å–∫–ª–∞–¥ –ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç")
        
        cards = await tarot_api.get_cards()
        if not cards or len(cards) < 10:
            await progress_msg.delete()
            await message.answer("üòî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç.", reply_markup=get_main_keyboard())
            return
        
        selected_cards = random.sample(cards, 10)
        positions = [
            "1. –ù–∞—Å—Ç–æ—è—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è", 
            "2. –í—ã–∑–æ–≤", 
            "3. –ë–µ—Å—Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ–µ", 
            "4. –ü—Ä–æ—à–ª–æ–µ", 
            "5. –°–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ–µ", 
            "6. –ë—É–¥—É—â–µ–µ",
            "7. –í–∞—à–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ", 
            "8. –í–Ω–µ—à–Ω–µ–µ –≤–ª–∏—è–Ω–∏–µ", 
            "9. –ù–∞–¥–µ–∂–¥—ã/—Å—Ç—Ä–∞—Ö–∏", 
            "10. –ò—Ç–æ–≥"
        ]
        is_reversed_list = [random.choice([True, False]) for _ in range(10)]
        
        text = format_card_message(selected_cards, positions, is_reversed_list, "üè∞ –†–∞—Å–∫–ª–∞–¥ –ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç")
        
        image_file = generate_celtic_cross_image(selected_cards, is_reversed_list)
        
        await progress_msg.delete()
        
        if image_file:
            await message.answer_photo(
                photo=image_file, 
                caption=text, 
                parse_mode="Markdown",
                reply_markup=get_main_keyboard()
            )
        else:
            await message.answer(
                text, 
                parse_mode="Markdown",
                reply_markup=get_main_keyboard()
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_celtic_cross_spread: {e}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞",
            reply_markup=get_main_keyboard()
        )